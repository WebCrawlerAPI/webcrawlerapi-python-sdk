name: Release to PyPI

on:
  push:
    tags:
      - 'v*'

jobs:
  validate-version:
    name: Validate Tag Version
    runs-on: ubuntu-latest
    outputs:
      version-match: ${{ steps.version-check.outputs.match }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate tag version matches setup.py
      id: version-check
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
        
        # Extract version from setup.py
        SETUP_VERSION=$(python -c "
        import re
        with open('setup.py', 'r') as f:
            content = f.read()
        match = re.search(r'version=[\"\'](.*?)[\"\']', content)
        if match:
            print(match.group(1))
        else:
            exit(1)
        ")
        echo "Setup.py version: $SETUP_VERSION"
        
        # Compare versions
        if [ "$TAG_VERSION" = "$SETUP_VERSION" ]; then
          echo "✅ Version match: $TAG_VERSION"
          echo "match=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Version mismatch: tag=$TAG_VERSION, setup.py=$SETUP_VERSION"
          echo "match=false" >> $GITHUB_OUTPUT
          exit 1
        fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate-version
    if: needs.validate-version.outputs.version-match == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install package in development mode
      run: pip install -e .

    - name: Run tests with pytest
      run: |
        pytest --cov=webcrawlerapi --cov-report=xml --cov-report=term-missing -v

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run Black (code formatting check)
        run: black --check --diff .

      - name: Run isort (import sorting check)
        run: isort --check-only --diff .

      - name: Run flake8 (linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run mypy (type checking)
        run: mypy webcrawlerapi --ignore-missing-imports
        continue-on-error: true  # Don't fail CI on type errors for now

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-version, test, lint]
    if: needs.validate-version.outputs.version-match == 'true'
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m build          
          twine upload dist/*